/**
 * @defgroup checksums Checksummen [C/C++]
 * Algorithms for error-detecting and/or error-correcting.
 * 
 * \see https://intern.turag.de/wiki/doku.php/id,04_programmierung;checksummen
 *
 *
 *
 * @defgroup checksums-xor XOR-based checksums
 * @ingroup checksums
 * 
 * Provides xor checksum calculation. Fast, simple and also very insecure. 
 * Productive use is strictly discouraged.
 * 
 * XOR-based checksums are calculated by consecutively applying the xor-operator
 * to all data bytes.
 * 
 *  
 *
 * @defgroup checksums-crc CRC checksums
 * @ingroup checksums
 * 
 * Eine CRC-Summe ist ein fehlererkennender Code, dessen Vorteile ihn für 
 * eingebettete Systeme besonders geeignet machen:
 *  - einfach zu implementieren
 *  - leicht mathematisch zu analysieren
 *  - gut zur Erkennung der üblichen Übertragungsfehler in rauschbelasteten 
 * Umgebungen
 * 
 * CRC-Checksummen können verschiedene Wortbreiten haben. Über je mehr Bits 
 * die Checksumme verfügt, umso größer können die mit ihr abgesicherten Datenpakete
 * sein. Als Faustregel kann benutzt werden: *data size* < 2^(*n*+1) / 8 wobei
 * *data size* die Länge des Datenpaketes in Byte und *n* die Breite der 
 * CRC-Checksumme in Bit ist. Ein CRC-8 wäre also ausreichend um bis zu 63 Byte
 * an Daten abzusichern, die Checksumme eingeschlossen.
 *
 * TinA verfügt über verschiedene CRC-Algorithmen unterschiedlicher Breite,
 * jeweils in verschiedenen Optimierungsvarianten. Die gewünschte 
 * Variante kann für jeden Algorithmus konfiguriert werden:
 *
 *  - \ref TURAG_CRC_CRC8_ALGORITHM
 *  - \ref TURAG_CRC_CRC8_MOW_ALGORITHM
 *  - \ref TURAG_CRC_CRC16_ALGORITHM
 *
 * Wird \ref TURAG_CRC_INLINED_CALCULATION auf 1 definiert, so werden alle
 * Funktionen soweit möglich inlined ausgegeben.
 * 
 * \see config_tina_default.h
 * \see http://en.wikipedia.org/wiki/Cyclic_redundancy_check
 *
 *
 */
