/**
 * @defgroup checksums Checksums
 * Algorithms for error-detecting and/or error-correcting.
 * 
 * \see https://www.turag.de/wiki/doku.php/id,04_programmierung;checksummen
 *
 *
 *
 * @defgroup checksums-xor XOR-based 
 * @ingroup checksums
 * 
 * Provides xor checksum calculation. Fast, simple and also very insecure. Productive use is discouraged.
 * 
 * XOR-based checksums are calculated by consecutively applying the xor-operator
 * to all data bytes.
 * 
 *  
 *
 * @defgroup checksums-crc CRC (Cyclic Redundancy Check)
 * @ingroup checksums
 * 
 * A CRC is an error-detecting code whose advantages make it particularly useful in embedded applications.
 * 
 * CRCs are so called because the checksum is a redundancy and the algorithm is based on cyclic codes. CRCs are popular because they are simple to implement in binary hardware, easy to analyze mathematically, and particularly good at detecting common errors caused by noise in transmission channels.
 * 
 * CRC checksums come in different widths - the longer the checkum the more data can be securely transferred or stored. A very rough rule of thumb as to what CRC-length is required is: *data size* < 2^(*n*+1) / 8 where *data size* is the length of the data stream in bytes and *n* the length of the CRC in bit. So a CRC-8 would be sufficient to secure data streams up to the length of 63 Bytes, including the checksum.
 * 
 * \see http://en.wikipedia.org/wiki/Cyclic_redundancy_check
 *
 *
 */
